'use strict'

// Elements for DOM use later on
const container = document.getElementById('productImages');
const resultsButton = document.getElementById('resultsButton');
const clearButton = document.getElementById('clearButton');
const results = document.getElementById('results');
// Array to hold the DOM image elements. 
let imgElements = [];
// Array of the product objects
let products = [];
// Placeholder array of previous choices to ensure each new set of images doesnt match the previous set. Global scope for simplicity
let prev = [];
// Number of products to be displayed per round. Can be changed.
let selections = 3;
// Placeholder for number of clicks in current session. Global scope for simplicity
let clicks = 0;
// Number of rounds to display products. Can be changed.
const totalClicks = 25;

// Initialize
init();

// Necessary function on pageload.
function init(){
    // Generate the product objects
    initProducts();
    // Generate the DOM image elements
    generateImageElements();
    // Render a set of products
    renderImages();
    // Add an eventlistener for the product area.
    container.addEventListener('click', handleProductClick);
}

// Create a number of DOM elements to hold images, based on the variable 'selections', and append them to the product area. 
function generateImageElements(){
    for(let i = 0; i < selections; i++){
        let img = document.createElement('img');
        // For CSS purposes: 
        img.className = 'imgClickable';
        container.appendChild(img);
        imgElements.push(img);
    }
}

// Constructor for product objects. 
function product(imageName, fileExtension = 'jpg', views = 0, likes = 0){
    this.name = imageName;
    this.src = `img/${imageName}.${fileExtension}`;
    this.fileExtension = fileExtension;
    this.views = views;
    this.likes = likes;
    products.push(this);
}

// Generate the product objects. 
function initProducts(){
    // Check if a product array exists in local storage. 
    if(localStorage.getItem('products')){
        retrieveProducts();
        // Make the "clear data" button clickable (because there is data to be cleared)
        clearButton.className = 'clicks-allowed';
        clearButton.addEventListener('click', handleClearButtonClick);
    }else{
        // Generate the product objects if they don't exist in localstorage
        new product('bag');
        new product('banana');
        new product('bathroom');
        new product('boots');
        new product('breakfast');
        new product('bubblegum');
        new product('chair');
        new product('cthulhu');
        new product('dog-duck');
        new product('dragon');
        new product('pen');
        new product('pet-sweep');
        new product('scissors');
        new product('shark');
        new product('sweep', 'png');
        new product('tauntaun');
        new product('unicorn');
        new product('water-can');
        new product('wine-glass');
    }
    // Make sure the number of selections per round is an acceptable number. If it's too high, set it to 0.5 * total number of products, in order to work with the rule that the same product can't be shown twice in a row.  
    if (selections > Math.floor(products.length/2)) { 
        selections = Math.floor(products.length/2);
    }
}

// Retrieve the product objects from local storage.
function retrieveProducts(){
    let retrieved = localStorage.getItem('products');
    let parsed = JSON.parse(retrieved);
    // Iterate through the parsed array of objects and construct each one.
    for (let prod of parsed){
        let name = prod.name;
        let fileExtension = prod.fileExtension;
        let views = prod.views;
        let likes = prod.likes;
        new product(name, fileExtension, views, likes);
    }
}

// Generate an array of random numbers (corresponding to products) to be displayed this round.
function chooseRandom(){
    let randomNumbers = [];
    // Continue rolling random numbers until an acceptable array is found. 
    while(randomNumbers.length < selections){
        // Generate a random number
        let random = Math.round(Math.random() * (products.length - 1));
        // Check if the array of previous selections or the current array includes this number. If not, push it into the array.
        if(!randomNumbers.includes(random) && !prev.includes(random)){
            randomNumbers.push(random);
        }
    }
    // Store the successfully generated array into the 'prev' array to be checked against next round. 
    prev = randomNumbers;
    return randomNumbers;
}

// Render a set of products based on the 'chooseRandom()' function
function renderImages(){
    let randomArray = chooseRandom();
    // Iterate through the array generated by chooseRandom and render each corresponding product using the DOM image elements. 
    for(let i = 0; i < randomArray.length; i++){
        imgElements[i].src = products[randomArray[i]].src;
        imgElements[i].alt = products[randomArray[i]].name;
        // Increment the viewcount for each product that was displayed.
        products[randomArray[i]].views++;
    }
}

// Handler function for product click
function handleProductClick(event){
    // Do nothing if the container is clicked instead of a product
    if (event.target === container){
        return;
    }
    // Increment session total click count
    clicks++;
    // Iterate through product array and when the selected product matches a product in the array, increment its likes count and stop iterating.
    let selectedProduct = event.target.alt;
    for (let i = 0; i < products.length; i++){
        if (selectedProduct === products[i].name) {
            products[i].likes++;
            break;
        }
    }
    // Stop the program if totalClicks has been reached
    if (clicks >= totalClicks){
        // Remove the eventlistener from the product container
        container.removeEventListener('click', handleProductClick);
        // Clear the product images from the selection box
        for(let i = 0; i < imgElements.length; i++){
            imgElements[i].src = '';
            imgElements[i].alt = '';
            imgElements[i].classList = '';
        }
        // Make the "Show results" Button clickable
        resultsButton.addEventListener('click', handleResultsButtonClick);
        resultsButton.className = 'clicks-allowed';
        // Break so that a new set of images won't be rendered.
        return;
    }
    // Render a new set of images
    renderImages();
}

// Remove the stored product data from the local storage when the "Clear data" button is pressed
function handleClearButtonClick(){
    // Remove the data
    localStorage.removeItem('products');
    // Make the "clear data" button unclickable
    clearButton.className = '';
    clearButton.removeEventListener('click', handleClearButtonClick);
}

// Show the results when the "view results" button is clicked. 
function handleResultsButtonClick(){
    // Make the canvases to hold the charts and append them to the container
    let chartRawCanvas = document.createElement('canvas');
    let chartPercentCanvas = document.createElement('canvas');
    results.appendChild(chartRawCanvas);
    results.appendChild(chartPercentCanvas);
    // Defer to helper functions to generate the chart configs and data
    const chartRaw = new Chart(chartRawCanvas, generateRawChartConfig());
    const chartPercent = new Chart(chartPercentCanvas, generatePercentChartConfig());
    // Store the product data
    storeProducts();
    // Make the button unclickable
    resultsButton.removeEventListener('click', handleResultsButtonClick);
    resultsButton.className = '';
}

// Generate the chart with the raw views/likes data
function generateRawChartConfig(){
    // Push the data into arrays for easy handling
    let productNames = [];
    let productViews = [];
    let productLikes = [];
    for (let i = 0; i < products.length; i++){
        productNames.push(products[i].name);
        productViews.push(products[i].views);
        productLikes.push(products[i].likes);
    }
    // Set the chart data based on the arrays generated above
    const data = {
        labels: productNames,
        datasets: [{
            // likes dataset
            label: 'Likes',
            data: productLikes,
            backgroundColor: [
                'rgba(0,204,102,0.6)'
            ],
            borderColor: [
                'rgb(25,150,90)'
            ],
            borderWidth: 3
        },
        {
            // Views dataset
            label: 'Views',
            data: productViews,
            backgroundColor: [
                'rgba(102, 179, 205,0.6)'
            ],
            borderColor: [
                'rgb(25, 75, 175)'
            ],
            borderWidth: 3
        }]
    };
    // Set the chart config and add the data generated above
    const config = {
        type: 'bar',
        data: data,
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        },
    };
    // Return the generated config
    return config;
}

// Generate the chart with the percent data
function generatePercentChartConfig(){
    // Add names to an array for easy access; calculate and generate an array of percent like values based on the raw data.
    let productNames = [];
    let productPercents = [];
    for (let i = 0; i < products.length; i++){
        let percent = Math.round(100 * (products[i].likes/products[i].views));
        productNames.push(products[i].name);
        productPercents.push(percent);
    }
    // Set the chart data 
    const data = {
        labels: productNames,
        datasets: [{
            label: 'Percent approval',
            data: productPercents,
            backgroundColor: [
                'rgba(229,43,80,0.6)'
            ],
            borderColor: [
                'rgb(164,0,42)'
            ],
            borderWidth: 3,
        }]
    };
    // Set the chart config based on the generated data
    const config = {
        type: 'bar',
        data: data,
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                }
            }
        },
    };
    // return the new config
    return config;
}

// Stringify the product array and store it in localstorage
function storeProducts(){
    // Stringify the product array for easy storage/retrieval
    let stringifiedProducts = JSON.stringify(products);
    localStorage.setItem('products', stringifiedProducts);
    // Make the "Clear data" button clickable as there is now data to be cleared. 
    clearButton.className = 'clicks-allowed';
    clearButton.addEventListener('click', handleClearButtonClick);
}